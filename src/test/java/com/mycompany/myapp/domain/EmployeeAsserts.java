package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllPropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllUpdatablePropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeUpdatableFieldsEquals(expected, actual);
        assertEmployeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAutoGeneratedPropertiesEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableFieldsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relevant properties")
            .satisfies(e -> assertThat(e.firstName).as("check firstName").isEqualTo(actual.firstName))
            .satisfies(e -> assertThat(e.lastName).as("check lastName").isEqualTo(actual.lastName))
            .satisfies(e -> assertThat(e.email).as("check email").isEqualTo(actual.email))
            .satisfies(e -> assertThat(e.phoneNumber).as("check phoneNumber").isEqualTo(actual.phoneNumber))
            .satisfies(e -> assertThat(e.hireDate).as("check hireDate").isEqualTo(actual.hireDate))
            .satisfies(e -> assertThat(e.salary).as("check salary").isEqualTo(actual.salary))
            .satisfies(e -> assertThat(e.commissionPct).as("check commissionPct").isEqualTo(actual.commissionPct));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableRelationshipsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relationships")
            .satisfies(e -> assertThat(e.manager).as("check manager").isEqualTo(actual.manager))
            .satisfies(e -> assertThat(e.department).as("check department").isEqualTo(actual.department));
    }
}
